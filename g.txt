
Remove-Item "$env:APPDATA\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt"Â -Force
----------------------------------------------------------------------------------------------------
Graphics_DDA_Line_Alg

import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class Graphics_DDA_Line_Alg extends JPanel{


    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;
        
        ddaAlg(g, centerX, centerY - 50, centerX + 50, centerY + 50);
    }

    public static void ddaAlg(Graphics g, int x0, int y0, int x1, int y1){
        double dx = x1-x0;
        double dy = y1-y0;

        int step;

        if(Math.abs(dx) > Math.abs(dy))
            step = (int)Math.abs(dx);
        else
            step = (int)Math.abs(dy);

        double x_inc = dx/step;
        double y_inc = dy/step;

        double x = x0;
        double y = y0;

        for(int i = 0; i<step; i++){
            g.drawLine((int)Math.round(x), (int)Math.round(y), (int)Math.round(x), (int)Math.round(y));
            x += x_inc;
            y += y_inc;
        }
    }

    

    public static void main(String[] args) {
        JFrame frame = new JFrame("DDA Line Drawing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400); // Set your desired window size
        frame.setLocationRelativeTo(null); // Center the frame
        frame.add(new Graphics_DDA_Line_Alg());
        frame.setVisible(true);
    }
}

-----------------------------------------------------------------------------------------
Graphics_Bresenham_Line

import javax.swing.*;
import java.awt.*;

public class Graphics_Bresenham_Line extends JFrame {
    
    Graphics_Bresenham_Line(){
        setTitle("Bresenham's Line");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 400);
        setLocationRelativeTo(null);
        setResizable(false);
    }

    public void paint (Graphics g){
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        code(g, centerX, centerY, centerX+100, centerY+100);
    }

    public void code(Graphics g, int x1, int y1, int x2, int y2){
        int dx, dy, incr_1, incr_2, d, x, y, x_end; 

        dx = Math.abs(x2 - x1);
        dy = Math.abs(y2 - y1);

        d = 2*dy - dx;
        incr_1 = 2*dy;
        incr_2 = 2*(dy - dx);

        if(x1>x2){
            x = x2;
            y = y2;
            x_end = x1;
        }
        else{
            x = x1;
            y = y1;
            x_end = x2;
        }

        for(int i=x; i<=x_end; i++){
            g.drawLine(x1, y1, x2, y2);
            //x++;
            
            if(d<0)
                d = d + incr_1;
            else{
                y = y + 1;
                d = d + incr_2;
            }
        }
    }

    

    public static void main(String[] args) {
        Graphics_Bresenham_Line obj = new Graphics_Bresenham_Line();
        obj.setVisible(true);
    }
}

--------------------------------------------------------------------------------------
Graphics_Bresenham_Circle

import javax.swing.*;
import java.awt.*;

public class Graphics_Bresenham_Circle extends JPanel {
    static JFrame frame = new JFrame("Bresenham's Circle");

    Graphics_Bresenham_Circle(){
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    public void paint(Graphics g){
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        code(g, centerX, centerY, 100);
    }

    public void code(Graphics g, int x0, int y0, int radius) {
        int x = radius;
        int y = 0;
        int decision = 1 - x;

        while (y <= x) {
            drawCircle(g, x0, y0, x, y);
            y++;

            if (decision <= 0) {
                decision += 2*y + 1;
            } else {
                x--;
                decision += 2*(y - x) + 1;
            }
            drawCircle(g, x0, y0, x, y);
        }
    }

    public void drawCircle(Graphics g, int x0, int y0, int x, int y) {
        g.drawLine(x0 + x, y0 + y, x0 + x, y0 + y);
        g.drawLine(x0 - x, y0 + y, x0 - x, y0 + y);
        g.drawLine(x0 + x, y0 - y, x0 + x, y0 - y);
        g.drawLine(x0 - x, y0 - y, x0 - x, y0 - y);
        g.drawLine(x0 + y, y0 + x, x0 + y, y0 + x);
        g.drawLine(x0 - y, y0 + x, x0 - y, y0 + x);
        g.drawLine(x0 + y, y0 - x, x0 + y, y0 - x);
        g.drawLine(x0 - y, y0 - x, x0 - y, y0 - x);
    }


    public static void main(String[] args) {
        Graphics_Bresenham_Circle objCircle  = new Graphics_Bresenham_Circle();
        frame.add(objCircle);
    }
}
-------------------------------------------------------------------------------------
Applet Graphics_Bresenham_Circle
===============================
import java.awt.*;
import java.applet.*;

public class Graphics_Bresenham_Circle extends Applet {

    public void paint(Graphics g){
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        code(g, centerX, centerY, 100); 
    }

    public void code(Graphics g, int x0, int y0, int radius) {
        int x = radius;
        int y = 0;
        int decision = 1 - x;

        while (y <= x) {
            drawCircle(g, x0, y0, x, y);
            y++;

            if (decision <= 0) {
                decision += 2*y + 1;
            } else {
                x--;
                decision += 2*(y - x) + 1;
            }
            drawCircle(g, x0, y0, x, y);
        }
    }

    public void drawCircle(Graphics g, int x0, int y0, int x, int y) {
        g.drawLine(x0 + x, y0 + y, x0 + x, y0 + y);
        g.drawLine(x0 - x, y0 + y, x0 - x, y0 + y);
        g.drawLine(x0 + x, y0 - y, x0 + x, y0 - y);
        g.drawLine(x0 - x, y0 - y, x0 - x, y0 - y);
        g.drawLine(x0 + y, y0 + x, x0 + y, y0 + x);
        g.drawLine(x0 - y, y0 + x, x0 - y, y0 + x);
        g.drawLine(x0 + y, y0 - x, x0 + y, y0 - x);
        g.drawLine(x0 - y, y0 - x, x0 - y, y0 - x);
    }
}

/*<applet code="Graphics_Bresenham_Circle.class" width="1000" height="1000">
 </applet>*/


--------------------------------------------------------------------------------------
Graphics_MidPoint_Circle

import java.awt.*;
import javax.swing.*;

public class Graphics_MidPoint_Circle extends JFrame {
    int centerX, centerY, dGrid = 1, maxX, maxY;

    Graphics_MidPoint_Circle(){
        setTitle("Mid Point Circle");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public void paint(Graphics g) {
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        /* Drawing code goes here */
		drawCircle(g, centerX, centerY, 140);
    }

    public void drawCircle(Graphics g, int x0, int y0, int r) {
        int x = 0;
        int y = r;

        int d = 1-r;


        plot(g, x0, y0, x, y);

        while (y >= x) {
            if (d < 0) {
                d = d + 2*x+1;
            } else {
                d = d + 2*x - 2*y +1;

                y--;
            }

            x++;

            plot(g, x0, y0, x, y);
        }
    }

    private void plot(Graphics g, int x0, int y0, int x, int y) {
        g.fillOval((x + x0), (y + y0), 2, 2);
        g.fillOval((y + x0), (x + y0), 2, 2);
        g.fillOval((-x + x0), (y + y0), 2, 2);
        g.fillOval((-y + x0), (x + y0), 2, 2);
        g.fillOval((-x + x0), (-y + y0), 2, 2);
        g.fillOval((-y + x0), (-x + y0), 2, 2);
        g.fillOval((x + x0), (-y + y0), 2, 2);
        g.fillOval((y + x0), (-x + y0), 2, 2);
    }

    public static void main(String[] args) {
        Graphics_MidPoint_Circle objCircle  = new Graphics_MidPoint_Circle();
        objCircle.setVisible(true);;
    }


}



--------------------------------------------------------------------------------------


public class InLine{
 
  private void code(double x1, double y1, double x2, double y2) {
 
    double dx,dy,m,ry;
    int x,y;

    dx = x2 - x1;
    dy = y2 - y1;
 
    if (dx!=0){
        m = dy/dx;
        ry = y1;

        for(x = (int)Math.round(x1); x<=Math.round(x2) ; x++ ){
            y = (int)Math.round(ry);
            System.out.println(x + ", " + y);
            ry += m;
        }
    }else{
        if(dy==0){
            System.out.println(x1 + ", " + y1);
        }else{
            System.out.println("|m| > 1");       
        }
    }
  }


  public static void main(String[] args) {
    double x1,y1,x2,y2;
    x1 = 2;
    y1 = 2.5;
    x2 = 10;
    y2 = 10.5;
    
    InLine obj = new InLine();
    obj.code(x1, y1, x2, y2);
  }
}

--------------------------------------------------------------------------


public class DDA{

    public static void calculations(int x1, int y1, int x2, int y2){
        int dx, dy, step, i;
        double x_Inc, y_Inc, x, y;

        dx = x2-x1;//10-2=8
        dy = y2-y1;//20-5=15

        if(Math.abs(dx) > Math.abs(dy))
            step = (int)Math.abs(dx);
        else
            step = (int)Math.abs(dy);//15

        x = x1;//2
        y = y1;//5

        x_Inc = (double)dx/step;//8/15=0.53
        y_Inc = (double)dy/step;//1

        for(i=1; i<=step; i++){
            System.out.println("("+Math.round(x)+","+Math.round(y)+")");
            x += x_Inc;
            y += y_Inc;
        }
    }

    public static void main(String[] args) {
        int x1=2;
        int y1=5;
        int x2=10;
        int y2=20;

        calculations(x1, y1, x2, y2);
    }
}

------------------------------------------------------------------------------------------


public class BresenhamsLine{

    private void code(int x1, int y1, int x2, int y2) {
        int dx, dy, incr1, incr2, d, x, y, x_end, y_end;

        dx = Math.abs(x2 - x1);
        dy = Math.abs(y2 - y1);

        if (dx >= dy) {

            if (x1 < x2) {
                x = x1;
                y = y1;
                x_end = x2;
                y_end = y2;
            } else {
                x = x2;
                y = y2;
                x_end = x1;
                y_end = y1;
            }

            System.out.println(x + ", " + y);

            d = 2 * dy - dx;
            incr1 = 2 * dy;
            incr2 = 2 * (dy - dx);
            for (int I = x + 1; I <= x_end; I++) {
                if (d < 0) {
                    d += incr1;
                } else {
                    if (y < y_end) {
                        y += 1;
                    } else {
                        y -= 1;
                    }
                    d += incr2;
                }
                System.out.println(I + ", " + y);
            }
        }else {

            if (y1 < y2) {
                x = x1;
                y = y1;
                x_end = x2;
                y_end = y2;
            } else {
                x = x2;
                y = y2;
                x_end = x1;
                y_end = y1;
            }

            System.out.println(x + ", " + y);

            d = 2 * dx - dy;
            incr1 = 2 * dx;
            incr2 = 2 * (dx - dy);
            for (int I = y + 1; I <= y_end; I++) {
                if (d < 0) {
                    d += incr1;
                } else {
                    if (x < x_end) {
                        x += 1;
                    } else {
                        x -= 1;
                    }
                    d += incr2;
                }
                System.out.println(x + ", " + I);
            }
        }
    }

    public static void main(String[] args) {
        int x1, y1, x2, y2;
        
        x1 = 10;
        y1 = 2;
        x2 = 2;
        y2 = 10;

        BresenhamsLine obj = new BresenhamsLine();
        obj.code(x1, y1, x2, y2);

    }
}

----------------------------------------------------------------------------------------


public class Bresenhams_Circle {

    public static void drawCircle(int[][] grid, int x_c, int y_c, int radius) {
        int x = 0;
        int y = radius;
        int decisionParameter = 3 - 2 * radius;

        while (x <= y) {
            plotPixel(grid, x_c + x, y_c + y);
            plotPixel(grid, x_c - x, y_c + y);
            plotPixel(grid, x_c + x, y_c - y);
            plotPixel(grid, x_c - x, y_c - y);
            plotPixel(grid, x_c + y, y_c + x);
            plotPixel(grid, x_c - y, y_c + x);
            plotPixel(grid, x_c + y, y_c - x);
            plotPixel(grid, x_c - y, y_c - x);

            if (decisionParameter < 0) {
                decisionParameter += 4 * x + 6;
            } else {
                decisionParameter += 4 * (x - y) + 10;
                y--;
            }
            x++;
        }
    }

    public static void plotPixel(int[][] grid, int x, int y) {
        if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {
            grid[x][y] = 1; 
        }
    }

    public static void main(String[] args) {
        int width = 20;   
        int height = 20;  
        int grid[][] = new int[width][height]; 

        int centerX = 10; 
        int centerY = 10;
        int radius = 5;  

        drawCircle(grid, centerX, centerY, radius);

      
        for (int row[] : grid) {
            for (int pixel : row) {
                System.out.print(pixel);
            }
            System.out.println();
        }
    }
}

------------------------------------------------
================================================
------------------------------------------------


public class Q3 {
    public static void main(String[] args) {
		Q3 obj = new Q3();
		
        int[][] rectangle = {{2, 3}, {5, 3}, {5, 7}, {2, 7}}; //rectangle [(x1, y1), (x2, y2), (x3, y3), (x4, y4)]
        int[] translation = {1, 2}; //translation vector (tx, ty)

        System.out.println("Original Rectangle:");
        obj.printRectangle(rectangle);
        obj.translateRectangle(rectangle, translation);
        System.out.println("Translated Rectangle:");
        obj.printRectangle(rectangle);
    }

    private void translateRectangle(int[][] P, int[] T) {
        for (int i = 0; i < P.length; i++) {
            if (P[i].length == 2 && T.length == 2) {
                P[i][0] += T[0]; // Translate x-coordinate
                P[i][1] += T[1]; // Translate y-coordinate
            } else {
                System.out.println("Invalid input arrays. Each point array should have exactly 2 elements.");
                return;
            }
        }
    }

    private void printRectangle(int[][] rectangle) {
        for (int i = 0; i < rectangle.length; i++) {
            System.out.println("(" + rectangle[i][0] + ", " + rectangle[i][1] + ")");
        }
    }
}

---------------------------------------------------------------------------------------

import javax.swing.*;
import java.awt.*;

public class Q4 extends JFrame {
    private int[][] house = {
            {0, 0}, {100, 0}, {100, 100}, {0, 100}, {0, 0}, // House
			{50, -40}, {100, 0}, //House roof
			{100, 100}, {70, 100},  //Back to door
            {70, 50}, {30, 50}, {30, 100} // Door
    };

    private int[] translation = {100, 100}; // Translate the entire picture to the center

    public Q4() {
        setTitle("Draw Picture");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the frame

        translateShape(house, translation);

        getContentPane().add(new DrawingPanel());
    }

    private void translateShape(int[][] shape, int[] translation) {
        for (int i = 0; i < shape.length; i++) {
            if (shape[i].length == 2 && translation.length == 2) {
                shape[i][0] += translation[0];
                shape[i][1] += translation[1];
            } else {
                System.out.println("Invalid input arrays. Each point array should have exactly 2 elements.");
                return;
            }
        }
    }

    class DrawingPanel extends JPanel {
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;

            g2d.setColor(Color.BLACK);
            for (int i = 0; i < house.length - 1; i++) {
                int x1 = house[i][0];
                int y1 = house[i][1];
                int x2 = house[i + 1][0];
                int y2 = house[i + 1][1];
                g2d.drawLine(x1, y1, x2, y2);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Q4 drawPicture = new Q4();
            drawPicture.setVisible(true);
        });
    }
}

--------------------------------------------------------------------------------------------------------

import javax.swing.*;
import java.awt.*;

public class DDAScale extends JFrame {
    private int centerX, centerY, maxX, maxY;
    private double scaleX, scaleY; // Scaling factors

    public DDAScale() {
        setTitle("DDA Algorithm");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set up the drawing panel
        DrawingPanel drawingPanel = new DrawingPanel();
        add(drawingPanel);

        // Center the frame on the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);

        // Set initial scaling factors
        scaleX = 1.0;
        scaleY = 1.0;
    }

    class DrawingPanel extends JPanel {
        public DrawingPanel() {
            setPreferredSize(new Dimension(400, 400));
        }

        private void initgr() {
            Dimension d = getSize();
            maxX = d.width - 1;
            maxY = d.height - 1;
            centerX = maxX / 2;
            centerY = maxY / 2;
        }

        private void drawLine(Graphics g, int x1, int y1, int x2, int y2) {
            double xc, yc;
            double dx, dy, steps, x, y, k;

            dx = x2 - x1;
            dy = y2 - y1;

            if (Math.abs(dx) > Math.abs(dy))
                steps = Math.abs(dx);
            else
                steps = Math.abs(dy);

            xc = (dx / steps);
            yc = (dy / steps);
            x = x1;
            y = y1;

            for (k = 1; k <= steps; k++) {
                x = x + xc;
                y = y + yc;
                g.fillOval((int) (x * scaleX), (int) (y * scaleY), 5, 5);
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            initgr();

            // Set your desired scaling factors
            scaleX = 2.0;
            scaleY = 0.5;

            // Draw scaled lines
            drawLine(g, centerX - 100, centerY + 100, centerX + 100, centerY + 100);
            drawLine(g, centerX + 100, centerY + 100, centerX + 100, centerY - 100);
            drawLine(g, centerX + 100, centerY - 100, centerX - 100, centerY - 100);
            drawLine(g, centerX - 100, centerY - 100, centerX - 100, centerY + 100);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            DDAScale obj = new DDAScale();
            obj.setVisible(true);
        });
    }
}

---------------------------------------------------------------------------------------------
Rotate

import java.applet.Applet;
import java.awt.*;

public class MyRotate extends Applet {
    int centerX, centerY, dGrid = 1, maxX, maxY;

    void initgr() {
        Dimension d;
        d = getSize();
        maxX = getSize().width - 1;
        maxY = getSize().height - 1;
        centerX = maxX / 2;   
        centerY = maxY / 2;    
    }

    void Bresenham(Graphics g, int x0, int y0, int x1, int y1) {
        double xc, yc;
        double dx, dy, steps, x, y, k;

        dx = x1 - x0;
        dy = y1 - y0;

        if (Math.abs(dx) > Math.abs(dy))
            steps = Math.abs(dx);
        else
            steps = Math.abs(dy);

        xc = (dx / steps);
        yc = (dy / steps);
        x = x0;
        y = y0;

        for (k = 1; k <= steps; k++) {
            x = x + xc;
            y = y + yc;
            g.fillOval((int) x, (int) y, 5, 5);
        }
    }
	
	public void rotate(Graphics g, float a[][], int n, int x_pivot, int y_pivot, int angle) {
        double angleRad = Math.toRadians(angle);    // Convert angle to radians

        // Iterate through each point in the array
        for (int i = 0; i < a.length; i++) {
            float x = a[i][0];
            float y = a[i][1];

            // Rotate the point using rotation matrix
            float newX = (float) ((x - x_pivot) * Math.cos(angleRad) - (y - y_pivot) * Math.sin(angleRad) + x_pivot);
            float newY = (float) ((x - x_pivot) * Math.sin(angleRad) + (y - y_pivot) * Math.cos(angleRad) + y_pivot);

            // Update the coordinates in the array
            a[i][0] = newX;
            a[i][1] = newY;
        }

        // Draw the rotated polygon using Bresenham's line drawing algorithm
        // int n = a.length;
        for (int i = 0; i < n; i++) {
            int j = (i + 1) % n; // Connect the last point to the first to close the polygon
            Bresenham(g, (int) a[i][0], (int) a[i][1], (int) a[j][0], (int) a[j][1]);
        }
    }
	
	public void paint(Graphics g) {
        initgr();
		
		float points[][] = {{100, 400}, {200, 400}, {200, 300}, {100, 300}};
        rotate(
                g, points, points.length, 0, maxY, -45
        );
	}
}

/*<applet code="MyRotate.class" width="500" height="500">
 </applet>
 */

------------------------------------------------------------------------------------
Translate

import java.applet.Applet;
import java.awt.*;

public class MyTranslate extends Applet {
	int centerX, centerY, dGrid = 1, maxX, maxY;

    void initgr() {
        Dimension d;
        d = getSize();
        maxX = getSize().width - 1;
        maxY = getSize().height - 1;
        centerX = maxX / 2;   
        centerY = maxY / 2;    
    }

    void Bresenham(Graphics g, int x0, int y0, int x1, int y1) {
        double xc, yc;
        double dx, dy, steps, x, y, k;

        dx = x1 - x0;
        dy = y1 - y0;

        if (Math.abs(dx) > Math.abs(dy))
            steps = Math.abs(dx);
        else
            steps = Math.abs(dy);

        xc = (dx / steps);
        yc = (dy / steps);
        x = x0;
        y = y0;

        for (k = 1; k <= steps; k++) {
            x = x + xc;
            y = y + yc;
            g.fillOval((int) x, (int) y, 5, 5);
        }
    }
	
	public void translate(Graphics g, int x[], int y[], int tx, int ty) {
        for (int i=0; i<x.length; i++) {
            x[i] = x[i] + tx;
            y[i] = y[i] - ty;
        }

        int x0 = x[0];
        int y0 = y[0];

        for (int i=0; i<x.length; i++) {
            if (i == x.length-1) { // last point, should be matched back to the beginning
                Bresenham(g, x[i], y[i], x0, y0);
            } else {    // should be matched to the next point
                Bresenham(g, x[i], y[i], x[i+1], y[i+1]);
            }
        }
    }
	
	public void paint(Graphics g) {
        initgr();
		
		translate(
				g,
				new int[]{100, 200, 200, 100},
                new int[]{400, 400, 300, 300},
				50, 50
		);
	}
}

/*<applet code="MyTranslate.class" width="500" height="500">
 </applet>
 */

------------------------------------------------------------------------------------------
Transform

import javax.swing.*;
import java.awt.*;
import java.awt.geom.AffineTransform;

public class Transform extends JFrame {
    private int centerX, centerY, maxX, maxY;

    public Transform() {
        setTitle("Transform");
        setSize(800, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Set up the drawing panel
        DrawingPanel drawingPanel = new DrawingPanel();
        add(drawingPanel);

        // Center the frame on the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - getWidth()) / 2, (screenSize.height - getHeight()) / 2);
    }

    class DrawingPanel extends JPanel {
        public DrawingPanel() {
            setPreferredSize(new Dimension(400, 400));
        }

        private void initgr() {
            Dimension d = getSize();
            maxX = d.width - 1;
            maxY = d.height - 1;
            centerX = maxX / 2;
            centerY = maxY / 2;
        }

        private void drawLine(Graphics g, int x1, int y1, int x2, int y2) {
            g.drawLine(x1, y1, x2, y2);
        }

        private void drawTransformedRectangle(Graphics g, int x, int y, int width, int height, AffineTransform transform) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.transform(transform);

            drawLine(g2d, x, y, x + width, y);
            drawLine(g2d, x + width, y, x + width, y + height);
            drawLine(g2d, x + width, y + height, x, y + height);
            drawLine(g2d, x, y + height, x, y);

            g2d.dispose();
        }

        private void drawRegularPolygon(Graphics g, int x, int y, int sides, int size, AffineTransform transform) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.transform(transform);

            int[] xPoints = new int[sides];
            int[] yPoints = new int[sides];

            double angleIncrement = 2 * Math.PI / sides;

            for (int i = 0; i < sides; i++) {
                xPoints[i] = x + (int) (size * Math.cos(i * angleIncrement));
                yPoints[i] = y + (int) (size * Math.sin(i * angleIncrement));
            }

            g2d.drawPolygon(xPoints, yPoints, sides);
            g2d.dispose();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            initgr();

            // Draw the original rectangle
            drawLine(g, centerX - 100, centerY + 100, centerX + 100, centerY + 100);
            drawLine(g, centerX + 100, centerY + 100, centerX + 100, centerY - 100);
            drawLine(g, centerX + 100, centerY - 100, centerX - 100, centerY - 100);
            drawLine(g, centerX - 100, centerY - 100, centerX - 100, centerY + 100);

            // Customize scaling factor, translate amount, and rotate amount
            double scaleX = 1;  // Scaling factor along the x-axis
            double scaleY = 1;  // Scaling factor along the y-axis
            int translateX = 50; // Translation amount along the x-axis
            int translateY = -30; // Translation amount along the y-axis
            double rotateAngle = 0; // Rotation amount in degrees

            // Create an AffineTransform object and apply transformations
            AffineTransform transform = new AffineTransform();
            transform.translate(translateX, translateY);
            transform.scale(scaleX, scaleY);
            transform.rotate(Math.toRadians(rotateAngle), centerX, centerY);

            // Draw the transformed rectangle
            //drawTransformedRectangle(g, centerX - 100, centerY + 100, 200, 200, transform);

            // Draw a transformed regular pentagon
            drawRegularPolygon(g, centerX, centerY - 100, 4, 100, transform);
            //drawRegularPolygon(g, centerX, centerY - 100, 6, 100, transform);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Transform frame = new Transform();
            frame.setVisible(true);
        });
    }
}
