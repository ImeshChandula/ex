--------------------------------------------------------------------------------------------------
Graphics_DDA_Line_Alg

import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class Graphics_DDA_Line_Alg extends JPanel{


    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;
        
        ddaAlg(g, centerX, centerY - 50, centerX + 50, centerY + 50);
    }

    public static void ddaAlg(Graphics g, int x0, int y0, int x1, int y1){
        double dx = x1-x0;
        double dy = y1-y0;

        int step;

        if(Math.abs(dx) > Math.abs(dy))
            step = (int)Math.abs(dx);
        else
            step = (int)Math.abs(dy);

        double x_inc = dx/step;
        double y_inc = dy/step;

        double x = x0;
        double y = y0;

        for(int i = 0; i<step; i++){
            g.drawLine((int)Math.round(x), (int)Math.round(y), (int)Math.round(x), (int)Math.round(y));
            x += x_inc;
            y += y_inc;
        }
    }

    

    public static void main(String[] args) {
        JFrame frame = new JFrame("DDA Line Drawing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400); // Set your desired window size
        frame.setLocationRelativeTo(null); // Center the frame
        frame.add(new Graphics_DDA_Line_Alg());
        frame.setVisible(true);
    }
}

-----------------------------------------------------------------------------------------
Graphics_Bresenham_Line

import javax.swing.*;
import java.awt.*;

public class Graphics_Bresenham_Line extends JFrame {
    
    Graphics_Bresenham_Line(){
        setTitle("Bresenham's Line");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 400);
        setLocationRelativeTo(null);
        setResizable(false);
    }

    public void paint (Graphics g){
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        code(g, centerX, centerY, centerX+100, centerY+100);
    }

    public void code(Graphics g, int x1, int y1, int x2, int y2){
        int dx, dy, incr_1, incr_2, d, x, y, x_end; 

        dx = Math.abs(x2 - x1);
        dy = Math.abs(y2 - y1);

        d = 2*dy - dx;
        incr_1 = 2*dy;
        incr_2 = 2*(dy - dx);

        if(x1>x2){
            x = x2;
            y = y2;
            x_end = x1;
        }
        else{
            x = x1;
            y = y1;
            x_end = x2;
        }

        for(int i=x; i<=x_end; i++){
            g.drawLine(x1, y1, x2, y2);
            //x++;
            
            if(d<0)
                d = d + incr_1;
            else{
                y = y + 1;
                d = d + incr_2;
            }
        }
    }

    

    public static void main(String[] args) {
        Graphics_Bresenham_Line obj = new Graphics_Bresenham_Line();
        obj.setVisible(true);
    }
}

--------------------------------------------------------------------------------------
Graphics_Bresenham_Circle

import javax.swing.*;
import java.awt.*;

public class Graphics_Bresenham_Circle extends JPanel {
    static JFrame frame = new JFrame("Bresenham's Circle");

    Graphics_Bresenham_Circle(){
        frame.setSize(400, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    public void paint(Graphics g){
        super.paint(g);

        int centerX = getWidth()/2;
        int centerY = getHeight()/2;

        code(g, centerX, centerY, 100);
    }

    public void code(Graphics g, int x0, int y0, int radius) {
        int x = radius;
        int y = 0;
        int decision = 1 - x;

        while (y <= x) {
            drawCircle(g, x0, y0, x, y);
            y++;

            if (decision <= 0) {
                decision += 2*y + 1;
            } else {
                x--;
                decision += 2*(y - x) + 1;
            }
            drawCircle(g, x0, y0, x, y);
        }
    }

    public void drawCircle(Graphics g, int x0, int y0, int x, int y) {
        g.drawLine(x0 + x, y0 + y, x0 + x, y0 + y);
        g.drawLine(x0 - x, y0 + y, x0 - x, y0 + y);
        g.drawLine(x0 + x, y0 - y, x0 + x, y0 - y);
        g.drawLine(x0 - x, y0 - y, x0 - x, y0 - y);
        g.drawLine(x0 + y, y0 + x, x0 + y, y0 + x);
        g.drawLine(x0 - y, y0 + x, x0 - y, y0 + x);
        g.drawLine(x0 + y, y0 - x, x0 + y, y0 - x);
        g.drawLine(x0 - y, y0 - x, x0 - y, y0 - x);
    }


    public static void main(String[] args) {
        Graphics_Bresenham_Circle objCircle  = new Graphics_Bresenham_Circle();
        frame.add(objCircle);
    }
}

--------------------------------------------------------------------------------------


public class InLine{
 
  private void code(double x1, double y1, double x2, double y2) {
 
    double dx,dy,m,ry;
    int x,y;

    dx = x2 - x1;
    dy = y2 - y1;
 
    if (dx!=0){
        m = dy/dx;
        ry = y1;

        for(x = (int)Math.round(x1); x<=Math.round(x2) ; x++ ){
            y = (int)Math.round(ry);
            System.out.println(x + ", " + y);
            ry += m;
        }
    }else{
        if(dy==0){
            System.out.println(x1 + ", " + y1);
        }else{
            System.out.println("|m| > 1");       
        }
    }
  }


  public static void main(String[] args) {
    double x1,y1,x2,y2;
    x1 = 2;
    y1 = 2.5;
    x2 = 10;
    y2 = 10.5;
    
    InLine obj = new InLine();
    obj.code(x1, y1, x2, y2);
  }
}

--------------------------------------------------------------------------


public class DDA{

    public static void calculations(int x1, int y1, int x2, int y2){
        int dx, dy, step, i;
        double x_Inc, y_Inc, x, y;

        dx = x2-x1;//10-2=8
        dy = y2-y1;//20-5=15

        if(Math.abs(dx) > Math.abs(dy))
            step = (int)Math.abs(dx);
        else
            step = (int)Math.abs(dy);//15

        x = x1;//2
        y = y1;//5

        x_Inc = (double)dx/step;//8/15=0.53
        y_Inc = (double)dy/step;//1

        for(i=1; i<=step; i++){
            System.out.println("("+Math.round(x)+","+Math.round(y)+")");
            x += x_Inc;
            y += y_Inc;
        }
    }

    public static void main(String[] args) {
        int x1=2;
        int y1=5;
        int x2=10;
        int y2=20;

        calculations(x1, y1, x2, y2);
    }
}

------------------------------------------------------------------------------------------


public class BresenhamsLine{

    private void code(int x1, int y1, int x2, int y2) {
        int dx, dy, incr1, incr2, d, x, y, x_end, y_end;

        dx = Math.abs(x2 - x1);
        dy = Math.abs(y2 - y1);

        if (dx >= dy) {

            if (x1 < x2) {
                x = x1;
                y = y1;
                x_end = x2;
                y_end = y2;
            } else {
                x = x2;
                y = y2;
                x_end = x1;
                y_end = y1;
            }

            System.out.println(x + ", " + y);

            d = 2 * dy - dx;
            incr1 = 2 * dy;
            incr2 = 2 * (dy - dx);
            for (int I = x + 1; I <= x_end; I++) {
                if (d < 0) {
                    d += incr1;
                } else {
                    if (y < y_end) {
                        y += 1;
                    } else {
                        y -= 1;
                    }
                    d += incr2;
                }
                System.out.println(I + ", " + y);
            }
        }else {

            if (y1 < y2) {
                x = x1;
                y = y1;
                x_end = x2;
                y_end = y2;
            } else {
                x = x2;
                y = y2;
                x_end = x1;
                y_end = y1;
            }

            System.out.println(x + ", " + y);

            d = 2 * dx - dy;
            incr1 = 2 * dx;
            incr2 = 2 * (dx - dy);
            for (int I = y + 1; I <= y_end; I++) {
                if (d < 0) {
                    d += incr1;
                } else {
                    if (x < x_end) {
                        x += 1;
                    } else {
                        x -= 1;
                    }
                    d += incr2;
                }
                System.out.println(x + ", " + I);
            }
        }
    }

    public static void main(String[] args) {
        int x1, y1, x2, y2;
        
        x1 = 10;
        y1 = 2;
        x2 = 2;
        y2 = 10;

        BresenhamsLine obj = new BresenhamsLine();
        obj.code(x1, y1, x2, y2);

    }
}

----------------------------------------------------------------------------------------


public class Bresenhams_Circle {

    public static void drawCircle(int[][] grid, int x_c, int y_c, int radius) {
        int x = 0;
        int y = radius;
        int decisionParameter = 3 - 2 * radius;

        while (x <= y) {
            plotPixel(grid, x_c + x, y_c + y);
            plotPixel(grid, x_c - x, y_c + y);
            plotPixel(grid, x_c + x, y_c - y);
            plotPixel(grid, x_c - x, y_c - y);
            plotPixel(grid, x_c + y, y_c + x);
            plotPixel(grid, x_c - y, y_c + x);
            plotPixel(grid, x_c + y, y_c - x);
            plotPixel(grid, x_c - y, y_c - x);

            if (decisionParameter < 0) {
                decisionParameter += 4 * x + 6;
            } else {
                decisionParameter += 4 * (x - y) + 10;
                y--;
            }
            x++;
        }
    }

    public static void plotPixel(int[][] grid, int x, int y) {
        if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {
            grid[x][y] = 1; 
        }
    }

    public static void main(String[] args) {
        int width = 20;   
        int height = 20;  
        int grid[][] = new int[width][height]; 

        int centerX = 10; 
        int centerY = 10;
        int radius = 5;  

        drawCircle(grid, centerX, centerY, radius);

      
        for (int row[] : grid) {
            for (int pixel : row) {
                System.out.print(pixel);
            }
            System.out.println();
        }
    }
}

